{"version":3,"file":"static/js/305.e8ca5465.chunk.js","mappings":"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","sources":["components/button/Button.js","components/movie/MovieCard.js","config.js","pages/MovieDetailsPage.js"],"sourcesContent":["import React from \"react\";\r\n\r\nconst Button = ({\r\n  onClick,\r\n  className = \"\",\r\n  type = \"button\",\r\n  bgColor = \"primary\",\r\n  children,\r\n  ...props\r\n}) => {\r\n  let bgClassName = \"bg-primary\";\r\n  switch (bgColor) {\r\n    case \"primary\":\r\n      bgClassName = \"bg-primary\";\r\n      break;\r\n    case \"secondary\":\r\n      bgClassName = \"bg-secondary\";\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n  return (\r\n    <button\r\n      type={type}\r\n      onClick={onClick}\r\n      className={`px-6 py-3 rounded-lg text-white capitalize font-medium mt-auto ${bgClassName} ${className}`}\r\n      {...props}\r\n    >\r\n      {children}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { tmdbAPI } from \"../../config\";\r\nimport Button from \"../button/Button\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst MovieCard = ({ item }) => {\r\n  const { title, vote_average, release_date, poster_path, id } = item;\r\n  const navigate = useNavigate();\r\n  return (\r\n    <div className=\"movie-card flex flex-col rounded-2xl p-3 bg-slate-800 text-white h-full select-none\">\r\n      <img\r\n        src={tmdbAPI.imageW500(poster_path)}\r\n        alt=\"\"\r\n        className=\"w-full h-[250px] object-cover rounded-xl mb-5\"\r\n      />\r\n      <div className=\"flex flex-col flex-1\">\r\n        <h3 className=\"text-xl font-bold mb-3\">{title}</h3>\r\n        <div className=\"flex items-center justify-between text-sm opacity-50 mb-10\">\r\n          <span>{new Date(release_date).getFullYear()}</span>\r\n          <span>{vote_average}</span>\r\n        </div>\r\n        <Button\r\n          className=\"w-full\"\r\n          bgColor=\"primary\"\r\n          onClick={() => navigate(`/movies/${id}`)}\r\n        >\r\n          Watch now\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nMovieCard.propTypes = {\r\n  item: PropTypes.shape({\r\n    title: PropTypes.string,\r\n    vote_average: PropTypes.number,\r\n    release_date: PropTypes.string,\r\n    poster_path: PropTypes.string,\r\n    id: PropTypes.number,\r\n  }),\r\n};\r\nexport default MovieCard;\r\n","export const fetcher = (...args) => fetch(...args).then((res) => res.json());\r\nexport const apiKey = \"6e1723fb3ef14dae3303742c9589daa3\";\r\nconst tmdbEndpoint = \"https://api.themoviedb.org/3/movie\";\r\nconst tmdbEndpointSearch = \"https://api.themoviedb.org/3/search/movie\";\r\nexport const tmdbAPI = {\r\n  getMovieList: (type, page = 1) =>\r\n    `${tmdbEndpoint}/${type}?api_key=${apiKey}&page=${page}`,\r\n  getMovieDetails: (movieId) => `${tmdbEndpoint}/${movieId}?api_key=${apiKey}`,\r\n  getMovieMeta: (movieId, type) =>\r\n    `${tmdbEndpoint}/${movieId}/${type}?api_key=${apiKey}`,\r\n  getMovieSearch: (query, page) =>\r\n    `${tmdbEndpointSearch}?api_key=${apiKey}&query=${query}&page=${page}`,\r\n  getGenreMovie: () =>\r\n    `https://api.themoviedb.org/3/genre/movie/list?api_key=${apiKey}`,\r\n  imageOriginal: (path) => `https://image.tmdb.org/t/p/original/${path}`,\r\n  imageW500: (path) => `https://image.tmdb.org/t/p/w500/${path}`,\r\n};\r\n","import React from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { SwiperSlide, Swiper } from \"swiper/react\";\r\nimport useSWR from \"swr\";\r\nimport MovieCard from \"../components/movie/MovieCard\";\r\nimport { fetcher, tmdbAPI } from \"../config\";\r\n\r\nconst MovieDetailsPage = () => {\r\n  const { movieId } = useParams();\r\n  const { data } = useSWR(tmdbAPI.getMovieDetails(movieId), fetcher);\r\n  if (!data) return null;\r\n  const { title, poster_path, backdrop_path, genres, overview } = data;\r\n\r\n  return (\r\n    <div className=\"pb-10\">\r\n      <div className=\"w-full h-[600px] relative\">\r\n        <div className=\"overlay absolute inset-0 bg-black bg-opacity-60\"></div>\r\n        <div\r\n          className=\"w-full h-full bg-cover bg-no-repeat\"\r\n          style={{\r\n            backgroundImage: `url(${tmdbAPI.imageOriginal(backdrop_path)})`,\r\n          }}\r\n        ></div>\r\n      </div>\r\n      <div className=\"w-full h-[400px] max-w-[800px] mx-auto -mt-[200px] relative z-10 mb-10\">\r\n        <img\r\n          src={tmdbAPI.imageOriginal(poster_path)}\r\n          alt=\"\"\r\n          className=\"w-full h-full object-cover rounded-xl\"\r\n        />\r\n      </div>\r\n      <h1 className=\"text-center text-white text-5xl font-bold mb-10\">\r\n        {title}\r\n      </h1>\r\n      {genres && genres.length > 0 && (\r\n        <div className=\"flex items-center justify-center gap-x-5 mb-10\">\r\n          {genres.map((item) => (\r\n            <span\r\n              className=\"py-2 px-4 border border-primary text-primary rounded\"\r\n              key={item.id}\r\n            >\r\n              {item.name}\r\n            </span>\r\n          ))}\r\n        </div>\r\n      )}\r\n      <p className=\"text-center leading-relaxed max-w-[800px] mx-auto mb-10\">\r\n        {overview}\r\n      </p>\r\n      <MovieCredits></MovieCredits>\r\n      <MovieVideos></MovieVideos>\r\n      <MovieSimilar></MovieSimilar>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst MovieCredits = () => {\r\n  const { movieId } = useParams();\r\n  const { data } = useSWR(tmdbAPI.getMovieMeta(movieId, \"credits\"), fetcher);\r\n\r\n  if (!data) return null;\r\n  const { cast } = data;\r\n  if (!cast || cast.length <= 0) return null;\r\n\r\n  return (\r\n    <div className=\"py-10\">\r\n      <h2 className=\"text-center text-3xl mb-10 font-medium\">Casts</h2>\r\n      <div className=\"grid grid-cols-5 gap-5\">\r\n        {cast.slice(0, 5).map((item) => (\r\n          <div key={item.id} className=\"cast-item rounded-xl\">\r\n            <img\r\n              src={tmdbAPI.imageOriginal(item.profile_path)}\r\n              alt=\"\"\r\n              className=\"w-full h-[400px] object-cover rounded-xl mb-3\"\r\n            />\r\n            <h3 className=\"text-xl font-medium\">{item.name}</h3>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst MovieVideos = () => {\r\n  const { movieId } = useParams();\r\n  const { data } = useSWR(tmdbAPI.getMovieMeta(movieId, \"videos\"), fetcher);\r\n\r\n  if (!data) return null;\r\n  const { results } = data;\r\n  if (!results || results.length <= 0) return null;\r\n\r\n  return (\r\n    <div className=\"py-10\">\r\n      <div className=\"flex flex-col gap-10\">\r\n        {results.slice(0, 2).map((item) => (\r\n          <div key={item.id}>\r\n            <h3 className=\"mb-5 text-xl font-medium p-3 bg-secondary inline-block\">\r\n              {item.name}\r\n            </h3>\r\n            <div className=\"w-full aspect-video\">\r\n              <iframe\r\n                width=\"1280\"\r\n                height=\"725\"\r\n                src={`https://www.youtube.com/embed/${item.key}`}\r\n                title=\"Youtube video player\"\r\n                frameBorder=\"0\"\r\n                allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\r\n                allowFullScreen\r\n                className=\"w-full h-full object-fill\"\r\n              ></iframe>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst MovieSimilar = () => {\r\n  const { movieId } = useParams();\r\n  const { data } = useSWR(tmdbAPI.getMovieMeta(movieId, \"similar\"), fetcher);\r\n\r\n  if (!data) return null;\r\n  const { results } = data;\r\n  if (!results || results.length <= 0) return null;\r\n\r\n  return (\r\n    <div className=\"py-10\">\r\n      <h2 className=\"text-3xl font-medium mb-10\">Similar movies</h2>\r\n      <div className=\"movie-list\">\r\n        <Swiper grabCursor={\"true\"} spaceBetween={40} slidesPerView={\"auto\"}>\r\n          {results &&\r\n            results.length > 0 &&\r\n            results.map((item) => (\r\n              <SwiperSlide key={item.id}>\r\n                <MovieCard item={item}></MovieCard>\r\n              </SwiperSlide>\r\n            ))}\r\n        </Swiper>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MovieDetailsPage;\r\n"],"names":["onClick","className","type","bgColor","children","props","bgClassName","item","title","vote_average","release_date","poster_path","id","navigate","useNavigate","src","tmdbAPI","alt","Date","getFullYear","fetcher","fetch","then","res","json","apiKey","tmdbEndpoint","getMovieList","page","getMovieDetails","movieId","getMovieMeta","getMovieSearch","query","getGenreMovie","imageOriginal","path","imageW500","MovieCredits","useParams","data","useSWR","cast","length","slice","map","profile_path","name","MovieVideos","results","width","height","key","frameBorder","allow","allowFullScreen","MovieSimilar","grabCursor","spaceBetween","slidesPerView","backdrop_path","genres","overview","style","backgroundImage"],"sourceRoot":""}